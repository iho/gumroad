type User {
  id: ID!
  username: String!
  name: String!
  bio: String!
}

type ExtendedUser {
  id: ID!
  username: String!
  name: String!
  bio: String!
  balance: Int!
  email: String!
}

type Product {
  id: ID!
  user: User!
  price: Int!
  name: String!

  description: String
  summary: String
  callToAction: String
  coverImage: String
  slug: String
  isPablished: Boolean
  receipt: String
  content: String
}

type Query {
  product(username: String!, slug: String!): Product!
  products(username: String, count: Int=100, after: Int): [Product!]!
  myProducts(count: Int=100, after: Int): [Product!]!  @authorized()
  me: ExtendedUser! @authorized()
}

directive @authorized on FIELD_DEFINITION | ENUM_VALUE

input NewProduct {
  name: String!
  price: Int!

  description: String!
  summary: String!
  callToAction: String!
  coverImage: String!
  slug: String!
  isPablished: Boolean!
  receipt: String!
  content: String!
}

type PayResponse {
  url: String!
}

input BuyProduct {
  productId: ID!
}

input PublishProduct {
  productId: ID!
  slug: String!
}

type Mutation {
  buyProduct(input: BuyProduct): PayResponse! @authorized()
  createProduct(input: NewProduct!): Product! @authorized()
  publishProduct(input: PublishProduct!): Product! @authorized()
  signup(email: String!, password: String!, username: String!, name: String): String!
  login(email: String!, password: String!): String!
  forgotPassword(email: String): Boolean
  changePassword(hash: String, password: String!): Boolean @authorized()
  singleUpload(file: Upload!): Boolean!
}

scalar Timestamp
scalar DateTime
scalar Upload