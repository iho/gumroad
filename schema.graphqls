type User {
  id: ID!
  username: String!
  name: String!
  bio: String!
}

type ExtendedUser {
  id: ID!
  username: String!
  name: String!
  bio: String!
  balance: Int!
  email: String!
}
type File{
  path: String!
  isBought: Boolean!
}
type Image{
  path: String!
  preview_path: String!
}

type Product {
  id: ID!
  user: User!
  price: Int!
  name: String!

  description: String
  summary: String
  callToAction: String
  coverImage: String
  slug: String
  isPablished: Boolean
  receipt: String
  content: File
  images: [Image!]
}

type Query {
  product(username: String!, slug: String!): Product!
  products(username: String, count: Int=100, after: Int): [Product!]!
  myProducts(count: Int=100, after: Int): [Product!]!  @authorized()
  me: ExtendedUser! @authorized()
  myImages: [Image!]! @authorized()
  myFiles: [File!]!   @authorized()
}

directive @authorized on FIELD_DEFINITION | ENUM_VALUE

input NewProduct {
  name: String!
  price: Int!

  description: String!
  summary: String!
  callToAction: String!
  coverImage: String!
  slug: String!
  isPablished: Boolean!
  receipt: String!
  content: String!
}

type PayResponse {
  url: String!
}

input BuyProduct {
  productId: ID!
}

input PublishProduct {
  productId: ID!
  slug: String!
}

type BoolResponse {
  isSuccess: Boolean!
}
type TokenResponse {
  token: String!
}
type Mutation {
  buyProduct(input: BuyProduct): PayResponse! @authorized()
  createProduct(input: NewProduct!): Product! @authorized()
  publishProduct(input: PublishProduct!): Product! @authorized()
  signup(email: String!, password: String!, username: String!, name: String): TokenResponse!
  login(email: String!, password: String!): TokenResponse!
  forgotPassword(email: String): BoolResponse
  changePassword(password: String!): BoolResponse @authorized()
}

schema {
  query: Query
  mutation: Mutation
}

scalar Timestamp
scalar DateTime
scalar Upload